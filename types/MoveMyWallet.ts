/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export interface MoveMyWalletInterface extends utils.Interface {
    functions: {
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "burn(address,uint256,uint256,address[],uint256[])": FunctionFragment;
        "getApproved(uint256)": FunctionFragment;
        "hash(uint256,address[],uint256[])": FunctionFragment;
        "isApprovedForAll(address,address)": FunctionFragment;
        "name()": FunctionFragment;
        "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
        "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
        "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
        "ownerOf(uint256)": FunctionFragment;
        "safeMint(address,address[],uint256[])": FunctionFragment;
        "safeTransferFrom(address,address,uint256)": FunctionFragment;
        "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
        "setApprovalForAll(address,bool)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "symbol()": FunctionFragment;
        "tokenURI(uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "approve"
            | "balanceOf"
            | "burn"
            | "getApproved"
            | "hash"
            | "isApprovedForAll"
            | "name"
            | "onERC1155BatchReceived"
            | "onERC1155Received"
            | "onERC721Received"
            | "ownerOf"
            | "safeMint"
            | "safeTransferFrom(address,address,uint256)"
            | "safeTransferFrom(address,address,uint256,bytes)"
            | "setApprovalForAll"
            | "supportsInterface"
            | "symbol"
            | "tokenURI"
            | "transferFrom"
    ): FunctionFragment;

    encodeFunctionData(
        functionFragment: "approve",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "burn",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>[],
            PromiseOrValue<BigNumberish>[]
        ]
    ): string;
    encodeFunctionData(functionFragment: "getApproved", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(
        functionFragment: "hash",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
    ): string;
    encodeFunctionData(
        functionFragment: "isApprovedForAll",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "onERC1155BatchReceived",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>[],
            PromiseOrValue<BigNumberish>[],
            PromiseOrValue<BytesLike>
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "onERC1155Received",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "onERC721Received",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>
        ]
    ): string;
    encodeFunctionData(functionFragment: "ownerOf", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(
        functionFragment: "safeMint",
        values: [PromiseOrValue<string>, PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
    ): string;
    encodeFunctionData(
        functionFragment: "safeTransferFrom(address,address,uint256)",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "setApprovalForAll",
        values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
    ): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "tokenURI", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(
        functionFragment: "transferFrom",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;

    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getApproved", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155BatchReceived", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeMint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;

    events: {
        "Approval(address,address,uint256)": EventFragment;
        "ApprovalForAll(address,address,bool)": EventFragment;
        "AssemblyAsset(address,uint256,uint256,address[],uint256[])": EventFragment;
        "AssemblyAssetClaimed(uint256,address,address[],uint256[])": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AssemblyAsset"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AssemblyAssetClaimed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
    owner: string;
    approved: string;
    tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
    owner: string;
    operator: string;
    approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface AssemblyAssetEventObject {
    firstHolder: string;
    tokenId: BigNumber;
    salt: BigNumber;
    addresses: string[];
    numbers: BigNumber[];
}
export type AssemblyAssetEvent = TypedEvent<
    [string, BigNumber, BigNumber, string[], BigNumber[]],
    AssemblyAssetEventObject
>;

export type AssemblyAssetEventFilter = TypedEventFilter<AssemblyAssetEvent>;

export interface AssemblyAssetClaimedEventObject {
    tokenId: BigNumber;
    owner: string;
    addresses: string[];
    numbers: BigNumber[];
}
export type AssemblyAssetClaimedEvent = TypedEvent<
    [BigNumber, string, string[], BigNumber[]],
    AssemblyAssetClaimedEventObject
>;

export type AssemblyAssetClaimedEventFilter = TypedEventFilter<AssemblyAssetClaimedEvent>;

export interface TransferEventObject {
    from: string;
    to: string;
    tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface MoveMyWallet extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: MoveMyWalletInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        approve(
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        burn(
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            salt: PromiseOrValue<BigNumberish>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

        hash(
            salt: PromiseOrValue<BigNumberish>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { tokenId: BigNumber }>;

        isApprovedForAll(
            owner: PromiseOrValue<string>,
            operator: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        name(overrides?: CallOverrides): Promise<[string]>;

        onERC1155BatchReceived(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>[],
            arg3: PromiseOrValue<BigNumberish>[],
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        onERC1155Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BigNumberish>,
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        onERC721Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

        safeMint(
            to: PromiseOrValue<string>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        "safeTransferFrom(address,address,uint256)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setApprovalForAll(
            operator: PromiseOrValue<string>,
            approved: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

        symbol(overrides?: CallOverrides): Promise<[string]>;

        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;
    };

    approve(
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        salt: PromiseOrValue<BigNumberish>,
        addresses: PromiseOrValue<string>[],
        numbers: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    hash(
        salt: PromiseOrValue<BigNumberish>,
        addresses: PromiseOrValue<string>[],
        numbers: PromiseOrValue<BigNumberish>[],
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
        owner: PromiseOrValue<string>,
        operator: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>[],
        arg3: PromiseOrValue<BigNumberish>[],
        arg4: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        arg3: PromiseOrValue<BigNumberish>,
        arg4: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        arg3: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    safeMint(
        to: PromiseOrValue<string>,
        addresses: PromiseOrValue<string>[],
        numbers: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        data: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
        operator: PromiseOrValue<string>,
        approved: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    transferFrom(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        approve(
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        burn(
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            salt: PromiseOrValue<BigNumberish>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<void>;

        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

        hash(
            salt: PromiseOrValue<BigNumberish>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        isApprovedForAll(
            owner: PromiseOrValue<string>,
            operator: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>;

        name(overrides?: CallOverrides): Promise<string>;

        onERC1155BatchReceived(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>[],
            arg3: PromiseOrValue<BigNumberish>[],
            arg4: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>;

        onERC1155Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BigNumberish>,
            arg4: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>;

        onERC721Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>;

        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

        safeMint(
            to: PromiseOrValue<string>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "safeTransferFrom(address,address,uint256)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>;

        setApprovalForAll(
            operator: PromiseOrValue<string>,
            approved: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<void>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

        symbol(overrides?: CallOverrides): Promise<string>;

        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {
        "Approval(address,address,uint256)"(
            owner?: PromiseOrValue<string> | null,
            approved?: PromiseOrValue<string> | null,
            tokenId?: PromiseOrValue<BigNumberish> | null
        ): ApprovalEventFilter;
        Approval(
            owner?: PromiseOrValue<string> | null,
            approved?: PromiseOrValue<string> | null,
            tokenId?: PromiseOrValue<BigNumberish> | null
        ): ApprovalEventFilter;

        "ApprovalForAll(address,address,bool)"(
            owner?: PromiseOrValue<string> | null,
            operator?: PromiseOrValue<string> | null,
            approved?: null
        ): ApprovalForAllEventFilter;
        ApprovalForAll(
            owner?: PromiseOrValue<string> | null,
            operator?: PromiseOrValue<string> | null,
            approved?: null
        ): ApprovalForAllEventFilter;

        "AssemblyAsset(address,uint256,uint256,address[],uint256[])"(
            firstHolder?: PromiseOrValue<string> | null,
            tokenId?: PromiseOrValue<BigNumberish> | null,
            salt?: null,
            addresses?: null,
            numbers?: null
        ): AssemblyAssetEventFilter;
        AssemblyAsset(
            firstHolder?: PromiseOrValue<string> | null,
            tokenId?: PromiseOrValue<BigNumberish> | null,
            salt?: null,
            addresses?: null,
            numbers?: null
        ): AssemblyAssetEventFilter;

        "AssemblyAssetClaimed(uint256,address,address[],uint256[])"(
            tokenId?: PromiseOrValue<BigNumberish> | null,
            owner?: PromiseOrValue<string> | null,
            addresses?: null,
            numbers?: null
        ): AssemblyAssetClaimedEventFilter;
        AssemblyAssetClaimed(
            tokenId?: PromiseOrValue<BigNumberish> | null,
            owner?: PromiseOrValue<string> | null,
            addresses?: null,
            numbers?: null
        ): AssemblyAssetClaimedEventFilter;

        "Transfer(address,address,uint256)"(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            tokenId?: PromiseOrValue<BigNumberish> | null
        ): TransferEventFilter;
        Transfer(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            tokenId?: PromiseOrValue<BigNumberish> | null
        ): TransferEventFilter;
    };

    estimateGas: {
        approve(
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        burn(
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            salt: PromiseOrValue<BigNumberish>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        hash(
            salt: PromiseOrValue<BigNumberish>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        isApprovedForAll(
            owner: PromiseOrValue<string>,
            operator: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<BigNumber>;

        onERC1155BatchReceived(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>[],
            arg3: PromiseOrValue<BigNumberish>[],
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        onERC1155Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BigNumberish>,
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        onERC721Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        safeMint(
            to: PromiseOrValue<string>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        "safeTransferFrom(address,address,uint256)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setApprovalForAll(
            operator: PromiseOrValue<string>,
            approved: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        symbol(overrides?: CallOverrides): Promise<BigNumber>;

        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        approve(
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        burn(
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            salt: PromiseOrValue<BigNumberish>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        hash(
            salt: PromiseOrValue<BigNumberish>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isApprovedForAll(
            owner: PromiseOrValue<string>,
            operator: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        onERC1155BatchReceived(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>[],
            arg3: PromiseOrValue<BigNumberish>[],
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        onERC1155Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BigNumberish>,
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        onERC721Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        safeMint(
            to: PromiseOrValue<string>,
            addresses: PromiseOrValue<string>[],
            numbers: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        "safeTransferFrom(address,address,uint256)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        "safeTransferFrom(address,address,uint256,bytes)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setApprovalForAll(
            operator: PromiseOrValue<string>,
            approved: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;
    };
}
